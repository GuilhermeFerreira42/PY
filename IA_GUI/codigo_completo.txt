# Main.py
import wx
from YouTubePage import YouTubePage

class MainFrame(wx.Frame):
    def __init__(self):
        super().__init__(None, title="Resumidor de Vídeos", size=(800, 600))

        # Criar um notebook para as abas
        self.notebook = wx.Notebook(self)

        # Adicionar a aba do YouTube
        self.youtube_page = YouTubePage(self.notebook)
        self.notebook.AddPage(self.youtube_page, "YouTube")

        # Configurar o layout principal
        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.notebook, 1, wx.EXPAND)
        self.SetSizer(sizer)

        self.Show()

if __name__ == "__main__":
    app = wx.App(False)
    frame = MainFrame()
    app.MainLoop()

# SubtitleProcessor.py
import yt_dlp
import re
import os
import json

class SubtitleProcessor:
    def __init__(self):
        pass

    def download_subtitles(self, video_url):
        ydl_opts = {
            'writesubtitles': True,
            'writeautomaticsub': True,
            'subtitleslangs': ['pt', 'pt-br'],
            'skip_download': True,
            'quiet': False
        }

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            try:
                result = ydl.extract_info(video_url, download=False)
                subtitle_file = None

                if 'requested_subtitles' in result:
                    subtitle_file = ydl.prepare_filename(result)
                    subtitle_file = subtitle_file.rsplit('.', 1)[0] + '.pt.vtt'
                    ydl.download([video_url])
                    print(f"Legendas baixadas para: {subtitle_file}")
                else:
                    print("Nenhuma legenda em português disponível.")
                return subtitle_file
            except Exception as e:
                print(f"Erro ao baixar legendas: {e}")
                return None

    def clean_and_consolidate_subtitles(self, subtitle_file, video_name):
        try:
            with open(subtitle_file, 'r', encoding='utf-8') as file:
                content = file.read()

            content = re.sub(r'(WEBVTT|Kind:.*|Language:.*)', '', content)
            content = re.sub(r'\d{2}:\d{2}:\d{2}\.\d{3} --> .*?\n', '', content)
            content = re.sub(r'<.*?>', '', content)
            content = re.sub(r'&nbsp;', ' ', content)
            content = re.sub(r'align:start position:\d+%|\n+', '\n', content).strip()

            lines = content.splitlines()
            unique_lines = list(dict.fromkeys(line.strip() for line in lines if line.strip()))

            consolidated_text = '\n'.join(unique_lines).strip()

            # Salvar as legendas em um arquivo JSON
            json_filename = f"{video_name}_subtitles.json"
            with open(json_filename, 'w', encoding='utf-8') as json_file:
                json.dump({"subtitles": unique_lines}, json_file, ensure_ascii=False, indent=4)

            print(f"Texto consolidado salvo em: {json_filename}")
            return json_filename
        except Exception as e:
            print(f"Erro ao limpar e consolidar as legendas: {e}")
            return None

# YouTubePage.py
import wx
import json
import os
import threading
from SubtitleProcessor import SubtitleProcessor

class YouTubePage(wx.Panel):
    def __init__(self, parent):
        super(YouTubePage, self).__init__(parent)
        self.subtitle_processor = SubtitleProcessor()
        self.history_file = "história do YouTube/histórico.json"
        self.InitUI()
        self.LoadHistory()

    def InitUI(self):
        vbox = wx.BoxSizer(wx.HORIZONTAL)

        # Sidebar para o histórico
        self.sidebar = wx.ListBox(self, style=wx.LB_SINGLE)
        vbox.Add(self.sidebar, proportion=1, flag=wx.EXPAND | wx.ALL, border=5)

        # Pane para o conteúdo do YouTube
        content_box = wx.BoxSizer(wx.VERTICAL)

        # Linha para URL e botão "Colar"
        hbox1 = wx.BoxSizer(wx.HORIZONTAL)
        self.url_label = wx.StaticText(self, label="URL do Vídeo:")
        hbox1.Add(self.url_label, flag=wx.RIGHT, border=8)
        self.url_text = wx.TextCtrl(self)
        hbox1.Add(self.url_text, proportion=1)
        
        self.paste_button = wx.Button(self, label="Colar")
        self.paste_button.Bind(wx.EVT_BUTTON, self.OnPaste)
        hbox1.Add(self.paste_button, flag=wx.LEFT, border=8)
        
        content_box.Add(hbox1, flag=wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, border=10)

        # Botões principais e barra de progresso
        hbox2 = wx.BoxSizer(wx.HORIZONTAL)

        # Alinhado à esquerda
        left_box = wx.BoxSizer(wx.HORIZONTAL)
        self.process_button = wx.Button(self, label="Processar")
        self.process_button.Bind(wx.EVT_BUTTON, self.OnProcess)
        left_box.Add(self.process_button)

        self.clear_button = wx.Button(self, label="Limpar")
        self.clear_button.Bind(wx.EVT_BUTTON, self.OnClear)
        left_box.Add(self.clear_button, flag=wx.LEFT | wx.RIGHT, border=5)

        self.copy_button = wx.Button(self, label="Copiar")
        self.copy_button.Bind(wx.EVT_BUTTON, self.OnCopy)
        left_box.Add(self.copy_button, flag=wx.LEFT | wx.RIGHT, border=5)

        self.summarize_button = wx.Button(self, label="Resumir")
        self.summarize_button.Bind(wx.EVT_BUTTON, self.OnSummarize)
        left_box.Add(self.summarize_button, flag=wx.LEFT | wx.RIGHT, border=5)

        self.progress_bar = wx.Gauge(self, range=100, size=(250, 25))
        left_box.Add(self.progress_bar, flag=wx.LEFT, border=10)

        hbox2.Add(left_box, flag=wx.ALIGN_LEFT)
        content_box.Add(hbox2, flag=wx.EXPAND | wx.TOP | wx.BOTTOM, border=10)

        # Caixa de texto para texto processado
        hbox3 = wx.BoxSizer(wx.HORIZONTAL)

        # Tela original de texto
        self.text_ctrl = wx.TextCtrl(self, style=wx.TE_MULTILINE | wx.TE_READONLY)
        hbox3.Add(self.text_ctrl, proportion=1, flag=wx.EXPAND | wx.ALL, border=5)

        # Nova tela para resumo
        self.summary_ctrl = wx.TextCtrl(self, style=wx.TE_MULTILINE | wx.TE_READONLY)
        hbox3.Add(self.summary_ctrl, proportion=1, flag=wx.EXPAND | wx.ALL, border=5)

        content_box.Add(hbox3, proportion=1, flag=wx.EXPAND)

        # Contador de palavras para o texto original
        self.word_count_label = wx.StaticText(self, label="Palavras: 0")
        content_box.Add(self.word_count_label, flag=wx.ALIGN_RIGHT | wx.RIGHT | wx.BOTTOM, border=10)

        # Contador de palavras para o resumo
        self.summary_word_count_label = wx.StaticText(self, label="Palavras (Resumo): 0")
        content_box.Add(self.summary_word_count_label, flag=wx.ALIGN_RIGHT | wx.RIGHT | wx.BOTTOM, border=10)

        vbox.Add(content_box, proportion=3, flag=wx.EXPAND)

        self.SetSizer(vbox)

    def OnPaste(self, event):
        """Cola o conteúdo da área de transferência na URL e limpa o campo antes."""
        if wx.TheClipboard.Open():
            if wx.TheClipboard.IsSupported(wx.DataFormat(wx.DF_TEXT)):
                data = wx.TextDataObject()
                wx.TheClipboard.GetData(data)
                self.url_text.SetValue(data.GetText())
            wx.TheClipboard.Close()

    def OnCopy(self, event):
        """Copia o texto processado para a área de transferência."""
        text = self.text_ctrl.GetValue()
        if text:
            if wx.TheClipboard.Open():
                wx.TheClipboard.SetData(wx.TextDataObject(text))
                wx.TheClipboard.Close()
                wx.MessageBox("Texto copiado com sucesso!", "Informação", wx.ICON_INFORMATION)
        else:
            wx.MessageBox("Nada para copiar.", "Erro", wx.ICON_ERROR)

    def OnSummarize(self, event):
        """Evento para resumir o texto (a funcionalidade será implementada depois)."""
        wx.MessageBox("Função de resumo ainda não implementada.", "Informação", wx.ICON_INFORMATION)

        # Exemplo de como contar palavras no texto resumido (após implementar o resumo)
        summary_content = self.summary_ctrl.GetValue()  # Texto do resumo
        summary_word_count = len(summary_content.split())
        self.summary_word_count_label.SetLabel(f"Palavras (Resumo): {summary_word_count}")

    def GetVideoNameFromURL(self, url):
        """Obtém o nome do vídeo a partir da URL."""
        # Extrai o nome do vídeo do URL
        # Exemplo: https://www.youtube.com/watch?v=dQw4w9WgXcQ -> "dQw4w9WgXcQ"
        return url.split('v=')[-1]

    def AddToHistory(self, video_name):
        """Adiciona o nome do vídeo à sidebar."""
        self.sidebar.Append(video_name)

    def LoadHistory(self):
        """Carrega o histórico de vídeos da pasta 'história do YouTube'."""
        if not os.path.exists("história do YouTube"):
            os.makedirs("história do YouTube")

        if os.path.exists(self.history_file):
            with open(self.history_file, 'r', encoding='utf-8') as file:
                history = json.load(file)
                for video_name in history:
                    self.AddToHistory(video_name)

    def OnProcess(self, event):
        """Inicia o processamento do vídeo e atualiza o histórico na sidebar."""
        video_url = self.url_text.GetValue()
        if not video_url:
            wx.MessageBox("Por favor, insira uma URL do vídeo.", "Erro", wx.ICON_ERROR)
            return

        self.progress_bar.SetValue(10)  # Atualiza a barra de progresso

        def run():
            subtitle_file = self.subtitle_processor.download_subtitles(video_url)
            if subtitle_file:
                self.progress_bar.SetValue(70)
                video_name = self.GetVideoNameFromURL(video_url)
                consolidated_file = self.subtitle_processor.clean_and_consolidate_subtitles(subtitle_file, video_name)
                self.progress_bar.SetValue(100)
                if consolidated_file:
                    with open(consolidated_file, 'r', encoding='utf-8') as file:
                        content = file.read()
                    wx.CallAfter(self.text_ctrl.SetValue, content)

                    # Contar palavras e atualizar o contador
                    word_count = len(content.split())
                    wx.CallAfter(self.word_count_label.SetLabel, f"Palavras: {word_count}")

                    # Adicionar o nome do vídeo à sidebar e salvar o histórico
                    wx.CallAfter(self.AddToHistory, video_name)
                    self.SaveHistory(video_name)
                else:
                    wx.CallAfter(wx.MessageBox, "Erro ao consolidar as legendas.", "Erro", wx.ICON_ERROR)
            else:
                wx.CallAfter(wx.MessageBox, "Não foi possível obter as legendas.", "Erro", wx.ICON_ERROR)

        thread = threading.Thread(target=run)
        thread.start()

    def OnClear(self, event):
        """Limpa todos os campos e remove os arquivos de legendas armazenados."""
        self.url_text.SetValue("")
        self.text_ctrl.SetValue("")
        self.summary_ctrl.SetValue("")
        self.progress_bar.SetValue(0)
        self.word_count_label.SetLabel("Palavras: 0")

        # Limpar os arquivos de legendas na pasta
        subtitle_files = [f for f in os.listdir("história do YouTube") if f.endswith('.txt')]
        for file in subtitle_files:
            os.remove(os.path.join("história do YouTube", file))

        wx.MessageBox("Arquivos de legendas limpos.", "Informação", wx.ICON_INFORMATION)

    def SaveHistory(self, video_name, video_url, subtitles_path):
        """Salva o nome do vídeo, URL e caminho das legendas no histórico."""
        if not os.path.exists("história do YouTube"):
            os.makedirs("história do YouTube")

        history = []
        if os.path.exists(self.history_file):
            with open(self.history_file, 'r', encoding='utf-8') as file:
                history = json.load(file)

        # Adiciona o vídeo ao histórico
        history.append({
            "name": video_name,
            "url": video_url,
            "subtitles": subtitles_path
        })

        with open(self.history_file, 'w', encoding='utf-8') as file:
            json.dump(history, file, ensure_ascii=False, indent=4)

