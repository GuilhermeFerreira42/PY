## ia chat
Estamos discutindo um projeto e organizando as ideias. Estamos criando um programa resumidor com Yan, que será semelhante a um navegador com várias abas. A primeira aba resumirá vídeos do YouTube que inserirmos, trazendo a transcrição e a opção de resumir. A segunda aba resumirá vídeos offline que já temos no computador. A terceira aba será um resumidor de PDF, com um chat para resumir ou fazer perguntas sobre o arquivo. Todas as abas terão um chat. O programa usará inteligência artificial da Meta. Já tenho parte do código funcionando e um protótipo em wxPython. Precisamos organizar as ideias para começar a implementar o programa com os requisitos mencionados. 

Para organizar as ideias, podemos estruturar o projeto em etapas claras e definir os requisitos de cada aba. Esta é uma proposta inicial: 

Estrutura do Programa 
Interface Principal (wxPython) com múltiplas abas, cada uma com funcionalidades específicas. Um layout intuitivo e responsivo para facilitar a navegação, além de um chat integrado em todas as abas. 

Funcionalidades por Aba 
Para a aba de resumir vídeos do YouTube, haverá um campo para inserir o link do vídeo. O sistema fará o download automático das legendas e exibirá a transcrição, com um botão para resumir a transcrição com a IA e chat para interagir. A aba de vídeos offline permitirá carregar arquivos de vídeo do computador, extraindo áudio e fazendo a transcrição, que também poderá ser resumida com a IA. Na aba de PDFs, será possível carregar arquivos, visualizar o conteúdo, gerar um resumo com a IA e fazer perguntas ou refinar o resumo através do chat. 

O programa terá inteligência artificial integrada ao modelo da Meta para processar e resumir textos, com chat similar ao GPT em todas as abas. A estrutura do código será modular, com a interface e cada aba separadamente. Um módulo específico será designado para cada função. 

Os próximos passos incluem definir o layout da interface, finalizar os requisitos e as entradas/saídas para cada aba, estruturar os módulos para processar os dados, integrar a IA da Meta para o chat e os resumos, e testar a interação entre as abas e a IA. 

Vamos fazer em orientado objeto e dividir em fases. Monte para mim apenas o front-end do programa em wxPython. E monte uma árvore binária dos arquivos main do programa. Explique a lógica que vamos abordar. Explique para mim onde ficará mais ou menos cada função, como vamos dividir. Se vamos programar cada aba para alguma coisa ou se vamos dividir, tem funções. Cada página de código executa uma função e assim por diante. 

Adotaremos uma abordagem orientada a objetos e dividiremos o programa em classes para cada aba. A janela principal (MainFrame) gerenciará as abas, que serão instâncias de classes separadas. 

Árvore binária dos arquivos principais do programa: 
Main. py 
├── YouTubePage. py 
├── OfflineVideoPage. py 
├── PDFPage. py 
├── ChatHandler. py 
├── Utils/ 
│ ├── YouTubeUtils. py 
│ ├── VideoUtils. py 
│ ├── PDFUtils. py 
│ ├── AIUtils. py 
└── Assets/ 
├── Icons/ 
├── Themes/ 

A janela principal é responsável por criá-la e gerenciar as abas. Cada aba terá suas próprias funções de front-end com chamadas a funções nos arquivos da pasta Utils. As funções do chat estarão centralizadas em ChatHandler. py. 

O programa será modular, onde cada aba trata apenas da interface e chamadas a funções, deixando o processamento para as funções utilitárias. Quando uma nova aba for adicionada, bastará criar uma nova classe e módulo utilitário correspondente. 

Em relação ao código do front-end em wxPython, a estrutura inicial inclui a criação da janela principal e as abas para vídeos do YouTube, vídeos offline e PDFs, cada uma com um layout básico de botões e campos de input. 

Nos próximos passos, precisamos dividir o código em arquivos separados, criar módulos utilitários e integrar a lógica do chat nas abas. Também é essencial testar o protótipo com dados reais e ajustar a interface.


vamos começar pela aba do youtube 
esse é o código que eu já tenho funcionando



import wx
import requests
import json
import threading
import time

# Configuração da API
API_URL = "http://localhost:11434/v1/chat/completions"
MODEL_NAME = "gemma2:2b"  # Alterado para o modelo correto

class ChatApp(wx.Frame):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        # Configurar a interface
        self.SetTitle("Chat com IA")
        self.SetSize((600, 400))
        panel = wx.Panel(self)

        vbox = wx.BoxSizer(wx.VERTICAL)

        # Substituir painel simples por ScrolledWindow
        self.history = wx.ScrolledWindow(panel, size=(-1, 300), style=wx.VSCROLL | wx.ALWAYS_SHOW_SB)
        self.history.SetBackgroundColour(wx.Colour(240, 240, 240))  # Cor de fundo para o painel
        self.history.SetScrollRate(5, 5)
        self.history_sizer = wx.BoxSizer(wx.VERTICAL)
        self.history.SetSizer(self.history_sizer)
        vbox.Add(self.history, proportion=1, flag=wx.EXPAND | wx.ALL, border=5)

        hbox = wx.BoxSizer(wx.HORIZONTAL)
        self.input_box = wx.TextCtrl(panel, size=(-1, 30))
        hbox.Add(self.input_box, proportion=1, flag=wx.EXPAND | wx.ALL, border=5)

        send_btn = wx.Button(panel, label="Enviar")
        send_btn.Bind(wx.EVT_BUTTON, self.send_message)
        hbox.Add(send_btn, flag=wx.ALL, border=5)

        vbox.Add(hbox, flag=wx.EXPAND)
        panel.SetSizer(vbox)

        self.Show()

    def add_message(self, message, is_user=True, update_last=False):
        """Adiciona uma mensagem ao painel de histórico."""
        if update_last and self.history_sizer.GetChildren():
            # Atualiza o último painel em vez de criar um novo
            last_panel = self.history_sizer.GetChildren()[-1].GetWindow()
            last_text = last_panel.GetChildren()[0]
            last_text.SetLabel(message)
            last_text.Wrap(self.GetSize()[0] - 50)
            self.history.Layout()
            self.history.Scroll(-1, self.history.GetVirtualSize()[1])
            return

        message_panel = wx.Panel(self.history, size=(-1, -1))
        message_sizer = wx.BoxSizer(wx.HORIZONTAL)

        # Estilo e cores diferentes para usuário e IA
        bg_color = wx.Colour(200, 230, 201) if is_user else wx.Colour(187, 222, 251)
        text_color = wx.Colour(0, 0, 0)

        message_text = wx.StaticText(message_panel, label=message, style=wx.ALIGN_LEFT)
        message_text.Wrap(self.GetSize()[0] - 50)  # Ajuste de largura para o texto
        message_text.SetBackgroundColour(bg_color)
        message_text.SetForegroundColour(text_color)

        # Adicionar funcionalidade de cópia
        message_text.Bind(wx.EVT_RIGHT_DOWN, self.copy_message)

        # Ajustar alinhamento baseado no tipo de mensagem
        if is_user:
            message_sizer.AddStretchSpacer()
            message_sizer.Add(message_text, flag=wx.EXPAND | wx.ALL, border=5)
        else:
            message_sizer.Add(message_text, flag=wx.EXPAND | wx.ALL, border=5)
            message_sizer.AddStretchSpacer()

        message_panel.SetSizer(message_sizer)
        self.history_sizer.Add(message_panel, flag=wx.EXPAND | wx.ALL, border=5)
        self.history.Layout()
        self.history.Scroll(-1, self.history.GetVirtualSize()[1])

    def send_message(self, event):
        user_message = self.input_box.GetValue().strip()
        if not user_message:
            return

        # Exibir mensagem do usuário na interface
        self.add_message(f"Você: {user_message}", is_user=True)
        self.input_box.Clear()

        # Enviar mensagem para a API em uma thread separada
        thread = threading.Thread(target=self.handle_ai_response, args=(user_message,))
        thread.start()

    def handle_ai_response(self, user_message):
        try:
            response = self.query_ai(user_message)
            ai_response = response.get("choices", [{}])[0].get("message", {}).get("content", "Sem resposta.")
            self.display_dynamic_ai_message(ai_response)
        except Exception as e:
            wx.CallAfter(self.add_message, f"Erro: {str(e)}", is_user=False)

    def display_dynamic_ai_message(self, full_message):
        """Exibe a mensagem da IA gradualmente, simulando o carregamento."""
        current_message = "IA: "
        wx.CallAfter(self.add_message, current_message, is_user=False)

        for char in full_message:
            current_message += char
            wx.CallAfter(self.add_message, current_message, is_user=False, update_last=True)
            time.sleep(0.02)  # Simula a geração gradual de texto

    def query_ai(self, message):
        payload = {
            "model": MODEL_NAME,
            "messages": [
                {"role": "system", "content": "Você é um assistente útil."},
                {"role": "user", "content": message}
            ]
        }
        headers = {"Content-Type": "application/json"}
        response = requests.post(API_URL, headers=headers, data=json.dumps(payload))
        response.raise_for_status()
        return response.json()

    def copy_message(self, event):
        """Permite copiar o texto da mensagem clicada com o botão direito."""
        widget = event.GetEventObject()
        if isinstance(widget, wx.StaticText):
            text_to_copy = widget.GetLabel()
            if wx.TheClipboard.Open():
                wx.TheClipboard.SetData(wx.TextDataObject(text_to_copy))
                wx.TheClipboard.Close()

if __name__ == "__main__":
    app = wx.App(False)
    frame = ChatApp(None)
    app.MainLoop()

e tenho esse código do chat que conversa com a IA

import wx
import requests
import json
import threading
import time

# Configuração da API
API_URL = "http://localhost:11434/v1/chat/completions"
MODEL_NAME = "gemma2:2b"  # Alterado para o modelo correto

class ChatApp(wx.Frame):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        # Configurar a interface
        self.SetTitle("Chat com IA")
        self.SetSize((600, 400))
        panel = wx.Panel(self)

        vbox = wx.BoxSizer(wx.VERTICAL)

        # Substituir painel simples por ScrolledWindow
        self.history = wx.ScrolledWindow(panel, size=(-1, 300), style=wx.VSCROLL | wx.ALWAYS_SHOW_SB)
        self.history.SetBackgroundColour(wx.Colour(240, 240, 240))  # Cor de fundo para o painel
        self.history.SetScrollRate(5, 5)
        self.history_sizer = wx.BoxSizer(wx.VERTICAL)
        self.history.SetSizer(self.history_sizer)
        vbox.Add(self.history, proportion=1, flag=wx.EXPAND | wx.ALL, border=5)

        hbox = wx.BoxSizer(wx.HORIZONTAL)
        self.input_box = wx.TextCtrl(panel, size=(-1, 30))
        hbox.Add(self.input_box, proportion=1, flag=wx.EXPAND | wx.ALL, border=5)

        send_btn = wx.Button(panel, label="Enviar")
        send_btn.Bind(wx.EVT_BUTTON, self.send_message)
        hbox.Add(send_btn, flag=wx.ALL, border=5)

        vbox.Add(hbox, flag=wx.EXPAND)
        panel.SetSizer(vbox)

        self.Show()

    def add_message(self, message, is_user=True, update_last=False):
        """Adiciona uma mensagem ao painel de histórico."""
        if update_last and self.history_sizer.GetChildren():
            # Atualiza o último painel em vez de criar um novo
            last_panel = self.history_sizer.GetChildren()[-1].GetWindow()
            last_text = last_panel.GetChildren()[0]
            last_text.SetLabel(message)
            last_text.Wrap(self.GetSize()[0] - 50)
            self.history.Layout()
            self.history.Scroll(-1, self.history.GetVirtualSize()[1])
            return

        message_panel = wx.Panel(self.history, size=(-1, -1))
        message_sizer = wx.BoxSizer(wx.HORIZONTAL)

        # Estilo e cores diferentes para usuário e IA
        bg_color = wx.Colour(200, 230, 201) if is_user else wx.Colour(187, 222, 251)
        text_color = wx.Colour(0, 0, 0)

        message_text = wx.StaticText(message_panel, label=message, style=wx.ALIGN_LEFT)
        message_text.Wrap(self.GetSize()[0] - 50)  # Ajuste de largura para o texto
        message_text.SetBackgroundColour(bg_color)
        message_text.SetForegroundColour(text_color)

        # Adicionar funcionalidade de cópia
        message_text.Bind(wx.EVT_RIGHT_DOWN, self.copy_message)

        # Ajustar alinhamento baseado no tipo de mensagem
        if is_user:
            message_sizer.AddStretchSpacer()
            message_sizer.Add(message_text, flag=wx.EXPAND | wx.ALL, border=5)
        else:
            message_sizer.Add(message_text, flag=wx.EXPAND | wx.ALL, border=5)
            message_sizer.AddStretchSpacer()

        message_panel.SetSizer(message_sizer)
        self.history_sizer.Add(message_panel, flag=wx.EXPAND | wx.ALL, border=5)
        self.history.Layout()
        self.history.Scroll(-1, self.history.GetVirtualSize()[1])

    def send_message(self, event):
        user_message = self.input_box.GetValue().strip()
        if not user_message:
            return

        # Exibir mensagem do usuário na interface
        self.add_message(f"Você: {user_message}", is_user=True)
        self.input_box.Clear()

        # Enviar mensagem para a API em uma thread separada
        thread = threading.Thread(target=self.handle_ai_response, args=(user_message,))
        thread.start()

    def handle_ai_response(self, user_message):
        try:
            response = self.query_ai(user_message)
            ai_response = response.get("choices", [{}])[0].get("message", {}).get("content", "Sem resposta.")
            self.display_dynamic_ai_message(ai_response)
        except Exception as e:
            wx.CallAfter(self.add_message, f"Erro: {str(e)}", is_user=False)

    def display_dynamic_ai_message(self, full_message):
        """Exibe a mensagem da IA gradualmente, simulando o carregamento."""
        current_message = "IA: "
        wx.CallAfter(self.add_message, current_message, is_user=False)

        for char in full_message:
            current_message += char
            wx.CallAfter(self.add_message, current_message, is_user=False, update_last=True)
            time.sleep(0.02)  # Simula a geração gradual de texto

    def query_ai(self, message):
        payload = {
            "model": MODEL_NAME,
            "messages": [
                {"role": "system", "content": "Você é um assistente útil."},
                {"role": "user", "content": message}
            ]
        }
        headers = {"Content-Type": "application/json"}
        response = requests.post(API_URL, headers=headers, data=json.dumps(payload))
        response.raise_for_status()
        return response.json()

    def copy_message(self, event):
        """Permite copiar o texto da mensagem clicada com o botão direito."""
        widget = event.GetEventObject()
        if isinstance(widget, wx.StaticText):
            text_to_copy = widget.GetLabel()
            if wx.TheClipboard.Open():
                wx.TheClipboard.SetData(wx.TextDataObject(text_to_copy))
                wx.TheClipboard.Close()

if __name__ == "__main__":
    app = wx.App(False)
    frame = ChatApp(None)
    app.MainLoop()






